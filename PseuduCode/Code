PQNode {
	PQNode left;
	PQNode right;
	PQNode father;
	Version nodeVersion;
	Object Value;
	Priority prio;
	int index;// TODO: figure out if that really needed?
	
	
	
	PQNode find(int *binDigit, int currentTurn) {
	if (currentTurn < 0) {
		return this;
	}
	if (binDigit[currentTurn] == 1) {
		return this.right.find(binDigit, currentTurn - 1);
	}
	return this.left.find(binDigit, currentTurn - 1);
	}
	void swap(PQNode node){
		Object tempValue = this.value;
		Priority tempPrio = this.prio;
		this.this.value = node.value;
		this.prio = node.prio;
		node.value = tempValue;
		node.prio = tempPrio;
	}
	
	void siftUp() {
		if(this.father ==NULL || this.father.prio <= this.prio){
			return;
		}
		this.swap(this.father);
		this.father.siftUp();
	}
	
	void siftDown() {
		if(this.left == NULL && this.right == NULL){
			return;
		}
		PQNode minSon = NULL;
		if(this.left && this.prio < this.left.prio){
			minSon = this.left
		}
		if(this.right && this.left.prio < this.right.prio){
			minSon = this.right
		}
		this.swap(this.minSon);
		minSon.siftUp();
	}	
}

NaviePQ{
	PQNode root;
	int size;
	Version pqVersion; // TODO: figure out if that really needed?
	
	
	Object top(){
		if(this.root){
			return root.value
		}
		throw "heap is empty"
	}
	
	void insert(Object Value, Priority prio){
		PQNode newNode = PQNode(value, prio)//TODO: what version new node is getting?
		if(this.root == NULL){
			this.root = newNode;	
			this.size++;			
			return;
		}
		PQNode father = this._find((this.size + 1) / 2);
		if ((this.size + 1) % 2 == 0) {
			father.left = newNode;
		} 
		else{
			father->rightV = newVertex;
		}
		newNode.father = father;
		this.size++;
		newNode._siftUp()
	}
	
	int binaryBase(int num, int *binDigits) {
        int currentTurn = 0;
        while (num > 0) {
            binDigits[currentTurn] = num % 2;
            currentTurn++;
            num = num / 2;
         }
		return currentTurn - 1;
    }
	
	
	
	PQNode _find(int index) {
		if (index > size || index <= 0) {
			return NULL;
		}
        int binDigits[HEAP_LOG_SIZE]; //maximum heap size of 2^100
        int currentTurn = this->binaryBase(index, binDigits);
        return this.root.find(index, binDigits, currentTurn - 1);
    }
	
	
	Object pop(){
		if(this.root == NULL)
			throw "heap is empty";
		
		Object min = this.root.value;

		if(this.size == 1){
			this.root == NUll;
			this.size--;
			return min;
		}
		
		PQNode swapper = this._find((this.size + 1) / 2);
		swapper.swap(this.root)
			if(this.size % 2 == 0)
				swapper.father.left = NULL;
			else
				swapper.father.right = NULL;			
		this.size--;
		this.root._siftDown();
		return min;
	}
